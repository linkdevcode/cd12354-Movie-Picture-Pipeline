name: Frontend Continuous Integration

on:
  # This allows running on-demand
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths:
      # This will only run on changes to the frontend code
      - "starter/frontend/**"
env:
  NODE_VERSION: 18.x

jobs:
  lint_job:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run lint custom action
        uses: ./.github/actions/lintFE
        with:
          node_version: ${{ env.NODE_VERSION }}

  test_job:
    name: Test Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run test custom action
        uses: ./.github/actions/testFE
        with:
          node_version: ${{ env.NODE_VERSION }}

  build_job:
    name: Build Application
    runs-on: ubuntu-latest
    needs:
      - lint_job
      - test_job

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js with specified version
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Step 3: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # Step 4: Install dependencies
      - name: Install dependencies
        working-directory: starter/frontend
        run: npm ci

      # Step 5: Run tests
      - name: Run tests
        working-directory: starter/frontend
        run: npm run test

      # Step 6: Build Docker image
      - name: Build Docker image
        working-directory: starter/frontend
        run: docker build -t frontend-app:latest .
