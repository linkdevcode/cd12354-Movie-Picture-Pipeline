name: Frontend Continuous Deployment

on:
  # This allows running on-demand
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      # This will only run on changes to the frontend code
      - "starter/frontend/**"
env:
  NODE_VERSION: 18.x
  AWS_REGION: us-east-1
  REPOSITORY: frontend
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  lint_job:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run lint custom action
        uses: ./.github/actions/lintFE
        with:
          node_version: ${{ env.NODE_VERSION }}

  test_job:
    name: Test Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run test custom action
        uses: ./.github/actions/testFE
        with:
          node_version: ${{ env.NODE_VERSION }}

  build_job:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest
    needs:
      - lint_job
      - test_job

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster

      - name: Get REACT_APP_MOVIE_API_URL from Kubernetes Service
        id: get-movie-api-url
        run: |
          REACT_APP_MOVIE_API_URL=$(kubectl get svc backend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL" >> $GITHUB_ENV

      - name: Build and Push to ECR
        working-directory: starter/frontend
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: ${{ env.REPOSITORY}}"
          echo "Image Tag: ${{ env.DOCKER_IMAGE_TAG }}"
          echo "URL : ${{ env.REACT_APP_MOVIE_API_URL }}"
          docker build --build-arg REACT_APP_MOVIE_API_URL=http://${{ env.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/${{ env.REPOSITORY}}:${{ env.DOCKER_IMAGE_TAG }} .
          docker push $REGISTRY/${{ env.REPOSITORY}}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Set Docker image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: kustomize edit set image frontend=$REGISTRY/${{ env.REPOSITORY}}:${{ env.DOCKER_IMAGE_TAG }}
        working-directory: ./starter/frontend/k8s

      - name: Deploy Kubernetes resources
        run: kustomize build | kubectl apply -f -
        working-directory: ./starter/frontend/k8s
